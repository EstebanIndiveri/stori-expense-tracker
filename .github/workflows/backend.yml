name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/backend/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'packages/backend/**'
      - 'go.mod'
      - 'go.sum'

env:
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-1'

jobs:
  # Detect changes and set up job matrix
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'packages/backend/**'
              - 'go.mod'
              - 'go.sum'

  # Backend testing and validation
  test-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    
    services:
      dynamodb-local:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd="curl -f http://localhost:8000/shell || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run go vet
        run: go vet ./packages/backend/...
      
      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
      
      - name: Run staticcheck
        run: staticcheck ./packages/backend/...
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: packages/backend
          args: --timeout=5m
      
      - name: Setup test environment
        run: |
          # Create test tables in DynamoDB Local
          cd packages/backend
          go run tools/setup-test-db/main.go
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          DYNAMODB_TABLE_NAME: stori-transactions-test
      
      - name: Run unit tests
        run: |
          cd packages/backend
          go test -v -race -coverprofile=coverage.out ./...
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          DYNAMODB_TABLE_NAME: stori-transactions-test
          ENVIRONMENT: test
      
      - name: Run integration tests
        run: |
          cd packages/backend
          go test -v -tags=integration ./tests/integration/...
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          DYNAMODB_TABLE_NAME: stori-transactions-test
          ENVIRONMENT: test
      
      - name: Generate coverage report
        run: |
          cd packages/backend
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: packages/backend/coverage.out
          flags: backend
          name: backend-coverage
      
      - name: Build Docker image (test)
        run: |
          cd packages/backend
          # Build and test Docker image locally
          docker build --platform linux/amd64 -t stori-api:test .
          docker run --rm -d --name test-container -p 8081:8080 \
            -e ENVIRONMENT=test \
            -e DYNAMODB_TABLE_NAME=stori-transactions-test \
            -e DYNAMODB_ENDPOINT=http://host.docker.internal:8000 \
            stori-api:test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8081/api/v1/health || exit 1
          
          # Cleanup
          docker stop test-container
      
      - name: Archive Dockerfile and configs
        uses: actions/upload-artifact@v3
        with:
          name: docker-configs-${{ github.sha }}
          path: |
            packages/backend/Dockerfile
            packages/backend/app-runner-config.json
          retention-days: 30

  # Security scanning
  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './packages/backend/...'
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'packages/backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (App Runner)
  deploy-staging:
    needs: [test-backend, security-scan]
    if: |
      always() && 
      needs.test-backend.result == 'success' && 
      needs.security-scan.result == 'success' && 
      github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stori-api-staging
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd packages/backend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Update App Runner service
        env:
          APP_RUNNER_SERVICE_ARN: ${{ vars.STAGING_APP_RUNNER_SERVICE_ARN }}
        run: |
          # Start deployment
          OPERATION_ID=$(aws apprunner start-deployment \
            --service-arn $APP_RUNNER_SERVICE_ARN \
            --query 'OperationId' --output text)
          
          echo "Started deployment with operation ID: $OPERATION_ID"
          
          # Wait for deployment to complete
          aws apprunner wait service-update-successful \
            --service-arn $APP_RUNNER_SERVICE_ARN
          
          echo "Deployment completed successfully"
      
      - name: Run smoke tests
        run: |
          cd packages/backend
          # Wait a bit more for service to be ready
          sleep 30
          go test -v -tags=smoke ./tests/smoke/...
        env:
          API_BASE_URL: ${{ vars.STAGING_API_URL }}
          ENVIRONMENT: staging

  # Deploy to production (App Runner)
  deploy-production:
    needs: [test-backend, security-scan]
    if: |
      always() && 
      needs.test-backend.result == 'success' && 
      needs.security-scan.result == 'success' && 
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stori-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd packages/backend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:production-corrected
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:production-corrected
      
      - name: Update App Runner service
        env:
          APP_RUNNER_SERVICE_ARN: ${{ vars.PROD_APP_RUNNER_SERVICE_ARN }}
        run: |
          # Start deployment
          OPERATION_ID=$(aws apprunner start-deployment \
            --service-arn $APP_RUNNER_SERVICE_ARN \
            --query 'OperationId' --output text)
          
          echo "Started deployment with operation ID: $OPERATION_ID"
          
          # Wait for deployment to complete (with timeout)
          timeout 900 aws apprunner wait service-update-successful \
            --service-arn $APP_RUNNER_SERVICE_ARN || {
            echo "Deployment timed out after 15 minutes"
            exit 1
          }
          
          echo "Production deployment completed successfully"
      
      - name: Run production smoke tests
        run: |
          cd packages/backend
          # Wait for service to be fully ready
          sleep 60
          go test -v -tags=smoke ./tests/smoke/...
        env:
          API_BASE_URL: ${{ vars.PROD_API_URL }}
          ENVIRONMENT: prod
      
      - name: Test AI endpoints
        run: |
          echo "Testing AI endpoints..."
          # Test AI advisor endpoint
          curl -f "${{ vars.PROD_API_URL }}/api/v1/ai/advisor?user_id=user-123" || exit 1
          
          # Test AI advice endpoint
          curl -f -X POST "${{ vars.PROD_API_URL }}/api/v1/ai/advice" \
            -H "Content-Type: application/json" \
            -d '{"user_id": "user-123", "question": "How can I save money?"}' || exit 1
          
          echo "AI endpoints are working correctly"
      
      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ github.run_number }}
          release_name: Backend Release v${{ github.run_number }}
          body: |
            Backend deployment for commit ${{ github.sha }}
            
            🚀 Deployed to: ${{ vars.PROD_API_URL }}
            🤖 AI Integration: Groq (llama3-8b-8192)
            🗄️ Database: DynamoDB (stori-transactions-prod)
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
